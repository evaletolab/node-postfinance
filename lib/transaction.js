/**
 * # transaction
 * Copyright (c)2011, by Branko Vukelic <branko@herdhound.com>
 *
 * @author Branko Vukelic <branko@herdhound.com>
 * @license MIT (see LICENSE)
 */

var config = require('../config');
var PostFinanceError = require('./error');
var xmlutils = require('./xmlutils');
var authpost = require('./authpost');
var messages = require('./messages');
var ducttape = require('./ducttape');
var debug = config.debug;
var transaction = exports;

var VALID_TRANSACTIONS = [
    'purchase', 
    'authorize', 
    'capture', 
    'void', 
    'credit'
];

/**
 * ## MAPPINGS
 * *Mappings between Daimyo fields and Samurai node names*
 */
transaction.MAPPINGS = {
  currency: 'currency_code'
};


/**
 * ## transaction.Transaction(opts)
 * *Low-level transaction object*
 * 
 * Options for the transaction object are:
 *
 *  + _type_: Transaction type
 *  + _data_: Transaction data
 *  + _[transactionId]_: (optional) Transaction ID
 * 
 * Note that the `Transaction` constructor is not meant to be used directly. 
 * However, if you find that other higher-level specialized constructors do 
 * not perform the kind of transaction you are looking for, you can use the
 * generic `Transaction` constructor to make the transactions.
 *
 * To use the generic constructor, supply the type of the transaction (it 
 * should be named after the request URI component that identifies the 
 * transaction type (e.g, if the URI ends in `/credit.xml`, the transaction
 * type is `credit`), and the `transactionId` option as necessary. The data 
 * option should be an object that contains key-value mappings such that 
 * each key corresponds to an XML node of the request payload. 
 *
 * When naming the keys, feel free to use camel-case names, as those will get
 * decamelized prior to XML conversion. For example if the node is called
 * `payment_method_token`, you may call it either that, or 
 * `paymentMethodToken`. Either way will work just fine (if it doesn't, file 
 * a bug, please).
 *
 * @param {Object} opts Transaction options
 * @constructor
 */
transaction.Transaction = function(opts) {
  // opts are required
  if (!opts) {
    throw new PostFinanceError('system', 'Missing options object', null);
  }
  // opts.type are required
  if (!opts.type || VALID_TRANSACTIONS.indexOf(opts.type) < 0) {
    throw new PostFinanceError('system', 'Missing or invalid transaction type', null);
  }
  // opts.data are required
  if (!opts.data) {
    throw new PostFinanceError('system', 'Missing payload data');
  }

  // Make data and path tamper-free properties
  ducttape.addOneTimeAccessor(this, 'data');
  ducttape.addOneTimeAccessor(this, 'type');
  ducttape.addOneTimeAccessor(this, 'path');
  ducttape.addOneTimeAccessor(this, 'useToken');

  this.type = opts.type;

  this.useToken = ['credit', 'void'].indexOf(this.type) === -1;
    
  // Some defaults for complex transactions
  if (!opts.transactionId) {
    opts.data.type = opts.type;
    opts.data.currency = opts.data.currency || config.option('currency');
  }

  this.data = opts.data;

};

/**
 * ## transaction.Transaction.process([card], callback)
 * *Process the transaction using the given card*
 *
 * After a transaction is processed, the transaction object gains one new 
 * property, `receipt`, which contains useful details on the status of the
 * transaction:
 *
 *  + _referenceId_: reference ID (this is not the transaction ID)
 *  + _transactionId_: this token can be used later to void or credit
 *  + _cretedAt_: time the transaction took place
 *  + _descriptor_: if gateway supports descriptors, it will be given here
 *  + _custom_: any custom fields you have set
 *  + _type_: transaction type (this should match the original transaction 
 *    type)
 *  + _amount_: amount in the transaction (this may differ from original
 *    amount due to rounding errors; you should make sure this is correct)
 *  + _currency_: currency used in the transaction
 *  + _success_: boolean success flag (`true` if all went well)
 *
 * The transaction object will also gain a property `messages` which will 
 * contain any messages generated by the gateway. In case of a successful 
 * transaction, A message will be returned for the field 'transaction', which
 * will read 'Success'. Other messages are assigned to individual fields for 
 * which there were any errors.
 *
 * The card object used for the transaction will also be update after 
 * processing a transaction. The card will gain the method property, and
 * have all its fields populated with data from the gateway. This is 
 * effectively like doing a ``card.load()``. Refer to documentaiton for the 
 * ``postfinance.Card.load()`` method.
 *
 * The card object is not required for _credit_ and _void_ transactions. For 
 * those transactions, you can safely pass null as the first argument, or just 
 * omit the first argument.
 *
 * @param {postfinance.Card} [card] Payment method to use for the transaction
 * @param {Function} callback Callback function
 */
transaction.Transaction.prototype.process = function(card, callback) {
  var self = this;
  var querystring = require('querystring');
  var transactionData;
  
  if (typeof card === 'function') {
    callback = card;
    card = null;
  }

  if (self.useToken && (!card || (!card.paidId&&!card.orderId))) {
    callback(new PostFinanceError('system', 'Card has no token', null));
    return;
  }

  // Augment transaction data with token
  transactionData = self.data;

  // Currency check
  if (transactionData.currency &&
      config.option('allowedCurrencies').indexOf(transactionData.currency) < 0) {
    
    callback(new PostFinanceError(
      'system', 
      'Currency not allowed', 
      transactionData.currency
    ));
    return;

  }

  if (!transactionData.custom) {
    transactionData.custom = {};
  }

  //options:
  // orderId*
  // amount*
  // groupId
  // email
  // * mandatory

  var paymentDataObj=this.getPayload(transactionData)


  // Reformat our data as required by the API
  var paymentData = querystring.stringify(paymentDataObj);

  // validate the cart
  authpost.makeRequest({
    method: 'POST',
    payload: paymentData,
    operation:'order'
  }, function(err, res) {
    var errMsg;

    if (err && err instanceof PostFinanceError) {
      return callback(err);
    }
    if (err) {
      return callback(new PostFinanceError('system', 'Error making create payment method request', err));      
    }


    // Parse the location header to extract the alias and his id
    // self.alias = res.body.ALIAS;
    // self.payId = res.body.PAYID;
    self._resetDirty();
    callback(null);
  });


};
